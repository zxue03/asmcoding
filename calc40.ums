#
#  calc40.ums
#
#  Assignment: asmcoding
#  Authors:    Victoria Chen and Zhicheng Xue
#  Date:       12/11/2020
#  Purpose:    Implemented the RPN calculator, which can execute corresponding
#              .um files. Responsible for reading UM instructions from
#              specified input files. Possible operation include push value on
#              the stack, traditional arithmetic bitwise OR and AND, change
#              sign, bitwise negation, swap two numbers, duplicate, pop,
#              clear the value stack, and print content of the value stack.

#  Calling conventions:
#    Return address in r1
#    Stack pointer in r2
#    r6 and r7 are temp registers
#    Nonvolatiles r0
#    r3 is the value stack pointer
#    r4 holds the new input value - for the most part
#    r0 is zero


.section init
    .temps r6, r7
    .zero r0
    r0 := 0
    r3 := value_stack
    r5 := 0

    # Purpose:   Initializes the jump_table, populates the jump table, and
    #            sets each element in the table to input error label
    # Register:  uses r4 and r5 to keep track of entries in the jump_table
    # Arguments: takes no arguments
    # Return:    void
    initialize_jump_table:
      r4 := jump_table
      r4 := r4 + r5
      m[r0][r4] := input_error
      r5 := r5 + 1
      if( r5 <s 256) goto initialize_jump_table using r4
      r5 := 48

    # Purpose:   Set each element in the jump table to point to the digit label
    # Registers: uses r4 and r5 to keep track of entries in the jump_table
    # Arguments: takes no arguments
    # Return:    void
    overwrite_digit_entry:
      r4 := jump_table + r5
      m[r0][r4] := digit
      r5 := r5 + 1
      if( r5 <s 58) goto overwrite_digit_entry using r4

    # Purpose:   Assigns each operation label to the associating entry in the
    #            jump table.
    # Registers: only the macros uses temp registers
    # Arguments: takes no argument
    # Return:    void
    command_entry:
      m[r0][jump_table + ' '] := waiting
      m[r0][jump_table + '\n'] := newline
      m[r0][jump_table + '+'] := plus
      m[r0][jump_table + '-'] := sub
      m[r0][jump_table + '*'] := mul
      m[r0][jump_table + '/'] := div
      m[r0][jump_table + '|'] := or
      m[r0][jump_table + '&'] := and
      m[r0][jump_table + 'c'] := change_sign
      m[r0][jump_table + '~'] := not
      m[r0][jump_table + 's'] := swap
      m[r0][jump_table + 'd'] := dup
      m[r0][jump_table + 'p'] := pop_discard
      m[r0][jump_table + 'z'] := zero_stack

.section text
    # Purpose:    Main function for the calculator. Calls waiting function
    #             for input to run the calculator.
    # Resgiter:   r5 holds the return address of the function at the end
    # Arguments:  takes no argument
    # Return:     void
    main:
      push r1 on stack r2
      push r4 on stack r2
      push r3 on stack r2
      goto waiting linking r1
      pop r3 off stack r2
      pop r4 off stack r2
      pop r5 off stack r2
      r1 := 0
      goto r5     # goes back to the caller of main - namely callmain

    # Purpose:    Takes input from users. Read one character at a time.
    # Register:   uses r4 to hold the input character
    # Arguments:  takes no argument
    # Return:     void
    waiting:
      r4 := input()

    # Purpose:    Checks if the input file is at the end of file.
    # Register:   uses r4 to hold the value of the character read in from input
    # Arguments:  takes in no argument
    # Return:     void
    waiting_with_character:
      if( r4 == -1) goto r1 using r5
      r5 := jump_table + r4
      r5 := m[r0][r5]  # r5 holds the entry in the jump table
      goto r5          # which has the address of associating operation label

    # Purpose:    Prints the appropriate error message when the user inputs
    #             an unknown character. Then continues to ask for input from
    #             user.
    # Register:   uses r4 to hold the character read in from input
    # Arguments:  takes in no argument
    # Return:     void
    input_error:
      output "Unknown character '"
      output r4
      output "'\n"
      goto waiting

    # Purpose:    Converts a digit to a numeral and pushes the value of that
    #             digit on the value stack.
    # Register:   uses r4 to hold the digit read in as decimal
    # Arguments:  takes in no argment
    # Return:     void
    digit:
      r4 := r4 - 48
      push r4 on stack r3

    # Purpose:    Read in one character at a time and that character should be
    #             the subsequent character of a numeral that is already pushed
    #             on the value stack. This function pops the number of top of
    #             the stack, multiplies it by 10, adds the decimal value of the
    #             current character, and pushs the final value of the value
    #             stack.
    # Registers:  uses r4 to hold the digit read in as decimal
    #             uses r5 to temporary hold value during arithmetic
    # Arguments:  takes in no argument
    # Return:     void
    entering:
      r4 := input()
      if( r4 >s 57) goto waiting_with_character using r5
      if( r4 <s 48) goto waiting_with_character using r5
      pop r5 off stack r3
      r5 := 10 * r5
      r4 := r4 - 48
      r4 := r5 + r4
      push r4 on stack r3
      goto entering

    # Purpose:    A helper function to print all values in the value stack
    #             prints one value at a time and goes back to the print_loop
    # Register:   temporally uses r3 as a pointer to the next element
    #             that we want to print on the stack
    # Arguments:  takes in no argment
    # Return:     void
    print_value:
      push r1 on stack r2
      push r4 on stack r2
      push m[r0][r3] on stack r2
      output ">>> "
      goto printd linking r1
      output '\n'
      pop stack r2
      pop r1 off stack r2
      pop r4 off stack r2
      r3 := r3 + 1
      goto print_loop

    # Purpose :  Prints all values on the value stack
    #            adds them, and pushes the result
    # Register:  temporally uses r3 as a pointer to loop through the stack
    #            but we restore r3 as the stack pointer (the top) at the end
    # Arugument: takes no argument
    # Return:    void
    newline:
      push r3 on stack r2
      print_loop:   # a loop that prints each element on the value stack
        if(r3 <s value_stack) goto print_value using r5
        pop r3 off stack r2
        goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            adds them, and pushes the sum on the value stack
    # Register:  uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    plus:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      r5 := r5 + r4
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            subtracts them, and pushes the difference in the value stack
    # Register:  uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    sub:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      r5 := r4 - r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            multiplies them, and pushes the product on the value stack
    # Register:  uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    mul:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      r5 := r4 * r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            divide them, and pushes the quotient on the value stack
    # Register:  uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    div:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r1 on stack r2
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      if (r5 == 0) goto div_0_error
      if (r4 <s 0) goto first_negative using r1
      if (r5 <s 0) goto second_negative using r1
      goto pos_pos_result
      first_negative:  # Check if the second number (stored in r5) is positive
        r4 := -r4      # or negative. Then go to appropriate case.
        if (r5 >s 0) goto negative_result using r1
        if (r5 <s 0) goto neg_neg_result using r1
      second_negative: # Check if the first number (stored in r4) is positive
        r5 := -r5      # or negative. Then go to appropriate case.
        if (r4 >s 0) goto negative_result using r1
        if (r4 <s 0) goto neg_neg_result using r1
      negative_result: # The case where the one element is positive and the
        r5 := r4 / r5  # other is negative, which the quotient (stored in r5)
        r5 := -r5      # will be a negative number.
        goto finish
      neg_neg_result:  # The case where the two elements are both negative,
        r5 := -r5      # which the quotient (stored in r5) will be a positive
        r5 := r4 / r5  # number.
        goto finish
      pos_pos_result:  # The case where the two elements are both positive,
        r5 := r4 / r5  # which the quotient (stored in r5) will be a positive
        goto finish    # number.
      finish:               # Push the quotient on the value stack and restore
        push r5 on stack r3 # the registers
        pop r4 off stack r2
        pop r1 off stack r2
        goto waiting
      div_0_error:      # devisor can't be zero, outputs a error message
        output "Division by zero\n"
        push r4 on stack r3
        push r5 on stack r3
        pop r4 off stack r2
        goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            bitwise or them, and pushes the result the value stack
    #            uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    or:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      r5 := r4 | r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top two element from the value stack,
    #            bitwise and them, and pushes the result on the value stack
    #            uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    and:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      r5 := r4 & r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top element from the value stack,
    #            changes it sign, pushes it back on the value stack
    #            uses r5 to hold the element
    # Arugument: takes no argument
    # Return:    void
    change_sign:
      if (r3 == value_stack) goto empty_stack_error using r5
      pop r5 off stack r3
      r5 := -r5
      push r5 on stack r3
      goto waiting

    # Purpose :  Pops the top element from the value stack,
    #            not it (bitwise complement), pushes it back on the value stack
    # Register : uses r5 to hold the element and result
    # Arugument: takes no argument
    # Return:    void
    not:
      if (r3 == value_stack) goto empty_stack_error using r5
      pop r5 off stack r3
      r5 := ~r5
      push r5 on stack r3
      goto waiting

    # Purpose :  swaps the top two elements on the value stack
    # Register:  uses r4 and r5 to hold the two elements
    # Arugument: takes no argument
    # Return:    void
    swap:
      if (r3 >=s value_stack - 1) goto two_elements_error using r5
      push r4 on stack r2
      pop r5 off stack r3
      pop r4 off stack r3
      push r5 on stack r3
      push r4 on stack r3
      pop r4 off stack r2
      goto waiting

    # Purpose :  Pops the top element from the value stack
    #            makes a copy of it, push them both
    # Resgiter:  uses r5 to hold the element
    # Arugument: takes no argument
    # Return:    void
    dup:
      if (r3 == value_stack) goto empty_stack_error using r5
      pop r5 off stack r3
      push r5 on stack r3
      push r5 on stack r3
      goto waiting

    # Purpose :  pops and discards one element on the value stack
    # Register:  uses r3 as the stack pointer
    # Arugument: takes no argument
    # Return:    void
    pop_discard:
      if (r3 == value_stack) goto empty_stack_error using r5
      pop stack r3
      goto waiting

    # Purpose :  pops all the element on the value stack
    # Register:  uses r3 as the stack pointer
    #            stack pointer
    # Arugument: takes no argument
    # Return:    void
    zero_stack:
      if( r3 == value_stack) goto waiting using r5
      pop stack r3
      goto zero_stack

    # No element on the stack while the operator needs 1 operand
    empty_stack_error:
      output "Stack underflow---expected at least 1 element\n"
      goto waiting

    # Few than 2 elements on the stack while the operator needs 2 operands
    two_elements_error:
      output "Stack underflow---expected at least 2 elements\n"
      goto waiting

# Allocates space for the value_stack
.section data
    .space 1500000
    value_stack:

# Allocates space for the jump table, which directs the process to
# different functions based on inputs
.section rodata
    jump_table:
    .space 256
